{{outlet}}
<br>
<br><br>

<h4>
  1. Can maybe have <b> 3 boxes </b> representing each entity <br>
  2. <b> First box lists the aircrafts </b>, if you <b> click an aircraft </b>, then it populates the 2nd box, containing the list of flights <br>
  3. From the <b> list of flights, if a flight is clicked </b>, then we see all the aircraft positions for that flight.<br>
  4. There can then be <b> a button which switches the flights box/container </b> to become the first box,this may reduce the number of boxes to 2, but then they can see all the flights at once and reverse-navigate.<br>
  5. This is <b> dependent on the loading of aircraft positions for an individual flight yielding better performance </b>.
  6. When an item is clicked, <b> check that it hasn't been loaded before </b>. <br><br>

  see aircraft.js service for latest on what to do. . .
</h4>


{{!-- 
    <br><br><br>

    new approach is to destructure each file's data, so remove "tRegJourney_ID": "0" &&,
 "AircraftPositionSource_ID": "1" from aircraftpositions and id from Aircraftsthen create menaingful relationships in the table as described here:

 Big table

Both aircraft REGs representing the unique-identifier of the aircrafts, they will be 2 big rows in column zero for each of the 2 aircraft REGs.

Then we will have various props from aircraft-position, as other table columns(meaning more frequent rows) but not         
"tRegJourney_ID": "0" &&,
 "AircraftPositionSource_ID": "1", as they’re not meaningful.

Try to use Latitude & Longitude in flight.json to determine destination

then still do the d3 and it's neat and we're happy

sample( 2 tall rows from the aircraft , many columns and rows for aircrafts positions, and some for flights )

<br><br>
clicking on certain values from the will open a modal isolating those pieces of info and showing the relationships between the properties
</h2> --}}


{{fa-icon "spinner" spin=true size="lg"}}
{{fa-icon "spinner" spin=true size=5}}
<br><br>

{{#unless loading}}
  hi FALSE NOW
{{/unless}}
{{#if loading}}
  if is TRUE NOW
{{/if}}

<div>
  {{#each aircraftRegFilters as |filteredReg|}}
  <br><br>
    {{#each-in filteredReg as |key value|}}
        {{key}}`{{value}}`<br>
    {{/each-in}}
    <br><br>
  {{/each}}
</div>

perhaps dont need such a big space between each key value pair in my tables<br>
can avoid this by switching p eleemtn for something else. sort out spacing yourself

<br>
if you want headings of table to hug the topborder tighter then swap a p for a div

<br><br>
later, could have an option where the difference between departure and actual take off times are analysed and displayed using a d3 control<br>
same goes for the landing vs arrival time

<br><br> the later again, you can see how many positions occur for a given flight by comparing the times which fall inside the departure and arrival times
for a flight which has the same flight id(or whatever the unique identifier is called)

the table isn't going to work out as it is right now....
might be better to use a filter and construct to objects, which are linked based on the Reg of the aircraft
later have sepaarte tables side by side and the positions height for each individual aircraft
should be the height of the row for the aircraft divided by num of positions for that aircraft
eg 220px / 18
<br><br>
need to handle when checkbox is first checked and filtered on message still says 'disabled' when it should say none<br>
****READ NOTE IN PROMISE OF loadAircraftLists()*********


{{!-- <table class="col-lg-offset-1 col-lg-10">
  <tr>    
    <td class="col-lg-1">Reg</td>
    <td class="col-lg-1">Model</td>
    <td class="col-lg-1">AircraftPositionType</td>
    <td class="col-lg-1">Latitude</td>
    <td class="col-lg-1">Longitude</td>
    <td class="col-lg-1">Altitude</td>
    <td class="col-lg-1">Speed</td>
    <td class="col-lg-1">Track</td>
    

  </tr>
  
  {{#each aircraftList as |aircraft|}}  
    <tr>
      
    
    {{#each-in aircraft as |key value|}}      
      <td>
        `{{value}}`
      </td>
      
    {{/each-in}}
  </tr>  
  {{/each}}
</table> --}}

the filtering needs optimising in terms of code use but right now it works

<br><br>
<br><br>
<h4 style="color:yellow">
  <b> the absolute must next thing to do</b><br>
  
    departure and arrival time(have slider disabled but still visible (possibly greyed out))
    <br> keep slider to width of filteredOn label and dropdown, 
    
    <br> <br>
  
  
  now handle filtering in filteraircraftpositions accordingly
  make relevant changes to filterAircraftPositions to finish off its filtering capabilities

  GO TO FUNC filterOnCustomer(), YOURE TRYING TO DESTRUCTURE THE FLIGHT OBJ TO GET DEPART AND ARRIVAL TIME AS WELL AS CUSTOMER ID (ALL AVAILABLE) IN FLIGHT OBJECT ALREADY
  <br> THEN YOU WANT TO COMPARE START AND END TIMES WITH THE FLIGHTPOSTIONS
  PUSH THE MATCHING FLIGHT POSITONS TO EACH OF THE OBJECTS THAT ALREADY HAS DEPART AND ARRIVAL TIME ALONG WITH CUSTOMER ID
  YOU COULD ALSO CHECK WITH THE REG TO VERIFY POSITIONS FALLS IN BETWEEN TIME AND REG
  AT THE END YOU SHULD HAVE AN OBJECT WITH DEPART,ARRIVAL,CUSTOMERID,REG FOR FILTERING ON CUSTOMER
</h4>

{{#each filterHeadingObjects as |filterObject|}}
  
    {{#each-in filterObject as |filterObjKey filterObjValue|}}
      {{filterObjKey}} 
            
      {{#each filterObjValue as |filterOption|}}
        {{filterOption}}<br>
      {{/each}}
    {{/each-in}}
  
  

{{/each}}


<br><br>


{{!-- {{#each filterHeadings as |filterHeadingKey filterHeadingValues|}}  
  {{filterHeadingKey}}
  {{filterHeadingValues}}
{{/each}} --}}





<div class="component-container col-lg-offset-1 col-lg-10">
  <svg>
    <circle cx="50" cy="50" r="10" stroke="white" stroke-width="1.5" fill="#39B7CD" />  
  </svg> 

  <div>
    <p class="sliding-middle-out container-peripheral-heading">
      ¬ Aircrafts
      ({{aircraftList.length}})
    </p>
    <label class="checkbox-inline container-peripheral-filtering">
      {{input type="checkbox" id="filterAircraftPositions" name="filterAircraftPositionsCheckbox" 
      change=(action 'toggleCheckBox') }} {{aircraftsCheckboxText}}
    </label>
  </div>
  
  <div> 
    {{component dynamicInjectionValue aircraftList=aircraftList 
      filterAircraftPositions= (action 'filterOnSelectedKey')
      filterFlightList= (action 'filterFlightList')
    }} 
  </div>




<div class="component-container col-lg-offset-1 col-lg-10"></div>
  <svg>
    <circle cx="50" cy="50" r="10" stroke="white" stroke-width="1.5" fill="#65909A" />  
  </svg> 

  <p class="sliding-middle-out container-peripheral-heading">
    ¬ Aircraft Positions
    {{#if filterAircraftPositions}}
      ({{aircraftPosition.length}})
    {{else}}
      ({{dummyPositions.length}})
    {{/if}}
  </p>  
  <div class="dropdown container-peripheral-filtering">
    <button class="btn btn-primary dropdown-toggle" id="menu1" type="button" data-toggle="dropdown">Dropdown Example
    <span class="caret"></span></button>
    <ul class="dropdown-menu" role="menu" aria-labelledby="menu1">

      {{#each filterHeadingObjects as |filterObject|}}
        
          {{#each-in filterObject as |filterObjKey filterObjValue|}}
              <li class="disabled-link">
                  <p {{action "pClicked" bubbles=false}}><b>{{filterObjKey}}</b></p>
              </li>
              {{#each filterObjValue as |filterOption|}}
                <li role="presentation">
                  <a {{action 'setKeyToFilterOn' filterOption}}>{{filterOption}}</a>
                </li>
              {{/each}}
          {{/each-in}}
    
      {{/each}}

    </ul>
  
</div>

  
  <input name={{oisin}} value={{filterPlaceholder}} 
    oninput={{action "filterOnSelectedKey" value="target.value"}} 
    onfocus={{action "removePlaceholder"}}
    onblur={{action "setupFilterPlaceholder" value="target.value"}} />

{{#if displayNoKeySetToFilterOn}}
  <label class="labelNullFilteringKey">
    Choose key from dropdown to apply filtering to
  </label>
{{/if}}

  <label class="container-peripheral-filtering">
    Filtered on: {{keyToFilterOn}}
  </label>
  

  <div>
    {{#if filterAircraftPositions}}
      {{aircraft-positions aircraftPosition=aircraftPosition}}
    {{else}}
      {{aircraft-positions aircraftPosition=dummyPositions}}
    {{/if}}
  </div>




<div class="component-container col-lg-offset-1 col-lg-10"></div>
  <svg>
    <circle cx="50" cy="50" r="10" stroke="white" stroke-width="1.5" fill="#0EBFE9" />  
  </svg> 

  <p class="sliding-middle-out container-peripheral-heading">
	  ¬ Flights
    ({{displayedFlightList.length}})
  </p>
  <div class=""> 
    {{flight-list 
      flightList=displayedFlightList 
      filterAircraftPositionsByFlightId= (action 'filterAircraftPositionsByFlightId')
    }}      
  </div>
</div>





{{!-- the below are inside the same overall div defined above this comment --}}


{{!-- <div class="component-container col-lg-3 col-lg-offset-1 ">
  <svg>
    <circle cx="50" cy="50" r="10" stroke="white" stroke-width="1.5" fill="#65909A" />  
  </svg> 
  <div class="sliding-middle-out">
    ¬ Aircraft Positions
  </div>
  <div class="col-lg-offset-1 "> 
    {{aircraft-positions aircraftPosition=aircraftPosition}}
   </div>
</div>

<div class="component-container col-lg-3 col-lg-offset-1 ">
  <svg >
    <circle cx="50" cy="50" r="10" stroke="white" stroke-width="1.5" fill="#0EBFE9" />  
  </svg> 
  <div class="sliding-middle-out">
	  ¬ Flights
  </div>
  <div class=""> 
    {{flight-list 
      flightList=displayedFlightList 
      filterAircraftPositionsByFlightId= (action 'filterAircraftPositionsByFlightId')
    }}      
  </div>
</div> --}}
<br><br><br><br>

